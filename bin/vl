#!/usr/bin/env node

var colors = require('colors');
var fs = require('fs');
var yargs = require('yargs')
    .usage('('+'v'.yellow.bold+')iew ('+'l'.yellow.bold+')arge table.\n\nUsage: vl [FILE] [OPTIONS]...')
    .example('vl table.txt', 'print the formatted table to stdout')
    .example('vl table.txt | less -S -N', 'pipe the output to less')
    .example('vl table.txt -k 1 | less -S -N', 'skip the first line')
    .option('m', { alias:'column_margin', describe:'number of spaces to separate columns', default:1 })
    .option('s', { alias:'separator', describe:'a regular expression to match column separators', default:'[\\t,]' })
    .option('k', { alias:'skip', describe:'number of lines to skip formatting', default:0 })
    .option('e', { alias:'lines-for-estimation', describe:'number of lines for estimation of column width', default:70 });
var argv = yargs.argv;

var re;
var widths;
var currentColumn = 0;
var howManyCharsInCell = 0;
var str = "";
var continueReading = true;


var FILENAME = argv._[0];
if (typeof(FILENAME)==="string") {
    re = fs.createReadStream(FILENAME);
} else if (!process.stdin.isTTY){
    re = process.stdin;
} else {
    yargs.showHelp();
    process.exit();
}

var COLUMN_MARGIN = argv.m;
var SEP = new RegExp(argv.s);
var SKIP = argv.k;
var LINES_FOR_ESTIMATION = argv.e;

var linesLeftForEstimation = LINES_FOR_ESTIMATION;
var linesToSkip = SKIP;

function makeSpaces(n) {
    return Array(n+1).join(' ');
}


/*******************  MAIN **********************/


re.on('readable', function () {
    if (continueReading) {
        var chunk = re.read();
    } else {
        return;
    }
    if (!!chunk) {
        var cur = chunk.toString();
    } else {
        var cur = '';
    }
    if (!!chunk && linesLeftForEstimation > 0) {
        // Hold the output.
        var lines = cur.split('\n');
        if (linesToSkip>0) {
            process.stdout.write(lines.slice(0,linesToSkip).join('\n')+'\n');
            str += lines.slice(linesToSkip).join('\n');
            linesToSkip -= lines.length - 1;
        } else {
            str += cur;
            linesLeftForEstimation -= lines.length - 1;
        }
    } else {
        str += cur;
        // Compute the widths.
        if (!widths) {
            var lines = str.split('\n');
            var cells = lines.map(function(s){return s.split(SEP);});

            var cellLengths = cells.map(function(l){
                return l.map(function(s){
                    return s.length;
                })
            });

            var listNumOfCellsInEachRow = cellLengths.map(function(l){
                return l.length;
            })

            var maxLength = Math.max.apply(null, listNumOfCellsInEachRow);
            
            var widthInEachColumn = [];
            for (var i=0;i<maxLength;i++) {
                var lengthsInColumn = cellLengths.map(function(l){return isNaN(l[i]) ? 0 : l[i]})
                widthInEachColumn.push(Math.max.apply(null, lengthsInColumn));
            }
            
            widths = widthInEachColumn;
        }

        // Estimation ended. Enter typewriter-style parser loop.
        var i = -1;
        var r = "";
        debugger;
        while (++i<str.length) {
            r = str[i];
            if (r=='\n') {
               process.stdout.write('\n');
               howManyCharsInCell = 0;
               currentColumn = 0;
            } else if (r.match(SEP)) {
               if (howManyCharsInCell>widths[currentColumn]) {
                   // If a cell is bigger than expected, expand that column for the rest of the file.
                   widths[currentColumn] = howManyCharsInCell;
               }
               process.stdout.write(makeSpaces(widths[currentColumn]-howManyCharsInCell+COLUMN_MARGIN));
               howManyCharsInCell = 0;
               currentColumn++;
            } else {
               process.stdout.write(r);
               howManyCharsInCell++;
            }
        }
        str = "";
    }
});


process.stdout.on('error', function () {
    console.error('Pipe found closed when trying to write.');
    continueReading = false;
});
